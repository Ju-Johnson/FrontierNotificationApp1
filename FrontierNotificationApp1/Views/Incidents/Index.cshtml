@model PaginatedList<FrontierNotificationApp1.Models.Incidents>

@{
    ViewData["Title"] = "Incident Directory";

}

<h2>Incident Directory</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Search by SDP Ticket: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Priority
            </th>
            <th>
                SDP Ticket
            </th>
            <th>
                Status
            </th>
            <th>
                Current Date/Time
            </th>
            <th>
                Subject
            </th>
            <th>
                Summary
            </th>
            <th>
                Description
            </th>
            <th>
                Initial Date/Time
            </th>
            <th>
                Impact
            </th>
            <th>
                Vendor Ticket
            </th>
            <th>
                Teams Engaged
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            string st = item.Status;
            string statusColor = "";
            switch (st)
            {
                case "Open":
                    statusColor = "red";
                    break;
                case "Monitoring":
                    statusColor = "yellow";
                    break;
                case "Resolved":
                    statusColor = "green";
                    break;
            }

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Priority)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sdpticket)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentDateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Subject)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Summary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InitialDateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Impact)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VendorTicket)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TeamsEngaged)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
   var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
   var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
